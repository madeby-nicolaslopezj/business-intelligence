vcov(data)
vcov(fit)
fitted(fit)
coefficients(fit)
plot(fit, family="Helvetica")
plot(fit, family="Helvetica")
help(predict.lm)
predict(fit)
predict(fit)
predict(fit, interval="confidence")
data.frame
help(data.frame)
newdata = data.frame(x1=65)
View(newdata)
View(newdata)
predict(fit, newdata, interval="confidence")
predict(fit, 65, interval="confidence")
help(predict)
help(predict.lm)
predict.lm(fit, newdata, interval="confidence")
attach(data)
require(gdata)
data <- read.xls("~/Downloads/energia.xlsx", sheet = 1, header = TRUE)
attach(data)
fit <- lm(y ~ x1)
summary(fit)
plot(fit, family="Helvetica")
estimacion2 <- 224.1979 + (0.9549*70)
newdata = data.frame(x1=65)
predict.lm(fit, newdata, interval="confidence")
require(gdata)
data <- read.xls("~/Downloads/energia.xlsx", sheet = 1, header = TRUE)
attach(data)
fit <- lm(y ~ x1)
summary(fit)
estimacion1 = data.frame(x1=65)
predict.lm(fit, estimacion1, interval="confidence")
estimacion2 = data.frame(x1=70)
predict.lm(fit, estimacion2, interval="confidence")
query <- "{name: 'Estadio Nacional'}"
library(RMongo)
library(RMongo)
library(RMongo)
##
# Connect
##
mongo <- mongoDbConnect('production', host='candidate.55.mongolayer.com', port=10184)
username='nicoreadonly'
password='vAQXa1TuMTWDSrQXAWDSr3l6vAQX'
authenticated <- dbAuthenticate(mongo, username, password)
query <- "{name: 'Estadio Nacional'}"
result <- dbGetQuery(mongo, 'places', query, limit=100)
result <- dbGetQuery(mongo, 'places', query, skip=0, limit=100)
result
query <- "{}"
result <- dbGetQuery(mongo, 'places', query, skip=0, limit=100)
result
result <- dbGetQuery(mongo, 'investments', query, skip=0, limit=100)
result
View(result)
result[0]
result[0]
result[0][1]
result[0]
result[1]
result[1].stats
result[1][stats]
result
name(results)
name(result)
names(result)
c('amount')
query(c('amount'))
result(c('amount'))
result[c('amount')]
data <- result[c('amount')]
data <- result[c('amount', 'stats.rentability')]
data <- result[c('amount', 'stats')]
data
dim(iris)
#Name of variables or columns
names(iris)
#Structure
data<-readWorksheetFromFile(file.choose(), sheet=1)
library("XLConnect")
data<-readWorksheetFromFile(file.choose(), sheet=1)
plot(data)
cor(data)
sueldo <- 100000
sueldo <- 100000
<-?
sueldo <- 100000
if (sueldo < 200000) {
print(1)
sueldo <- 100000
if (sueldo < 200000) {
print(1)
}
plot(data)
library("XLConnect")
data<-readWorksheetFromFile(file.choose(), sheet=1)
plot(data)
mayor40 <- data[data[, "Edad"] > 40,]
mayor40
data
plot(mayor40)
mayor40[1]
mayor40[1]
mayor40[2]
mayor40[, 1]
mayor40[, 2]
mayor40[1, 1]
mayor40
print(1)
print(3131341)
for (row in mayor40) {
print(row)
}
mayor40 <- data[data[, "Edad"] > 40,]
for (row in mayor40) {
print(row)
}
table(mayor40)
iris
dim(iris)
#Name of variables or columns
dim(iris)
names(iris)
#Structure
str(iris)
attributes(iris)
iris[1:5,]
iris[1:10, "Sepal.Length"]
summary(iris)
table(iris$Species)
pie(table(iris$Species))
mean(iris$Sepal.Length)
var(iris$Sepal.Length)
#Standard Deviation of Sepal.Length
sd(iris$Sepal.Length)
#Covariance of two variables
cov(iris$Sepal.Length, iris$Petal.Length)
#Correlation of two variables
cor(iris$Sepal.Length, iris$Petal.Length)
#Correlation matrix
cor(iris[,-5])
#Distribution of subsets
aggregate(Sepal.Length ~ Species, summary, data=iris)
#Box plots
boxplot(Sepal.Length~Species, data=iris)
library("XLConnect")
data<-readWorksheetFromFile(file.choose(), sheet=1)
plot(data)
summary(data)
data
data[]
data[1]
data["Contacto"]
data["Contacto"]
data["Contacto",]
data<-readWorksheetFromFile(file.choose(), sheet='Hoja1')
plot(data)
data["Contacto",]
data["Contacto",]
data
View(data)
View(data)
data<-readWorksheetFromFile(file.choose(), sheet=1)
data
refer<-readWorksheetFromFile(file.choose(), sheet=1)
refer
dat = read.csv("cities.csv", header = TRUE)
dat = read.csv(file.choose(), header = TRUE)
data = read.csv(file.choose(), header = TRUE)
dat
data
plot(data)
cov(data)
cor(data)
cor(data$1)
cor(data[1])
cor(data[-1])
cor(data[-1,])
cor(data[-1])
pairs(data)
pairs(data)
cor.test(data[-1])
cor.test(data)
cor.test(data, data)
cor.test(data[-1], data[-1])
cor(data)
cor(data[-1])
cor(data[-1])
CM <- cor(data[-1])
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), value > .85)
c(-1)
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), value > .6)
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), value > .6 && value != 1)
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), (value > .6 && value != 1))
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), value < .6)
print(1)
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), check)
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), check(valye))
check <- function(value) {
print(value)
}
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), check(value))
return false
check <- function(value) {
print(value)
return false
}
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), check(value))
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), check)
check <- function(value) {
print(value)
if (value === 1) return false
if (value < -0.6) return true
if (value > -0.6) return true
}
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), check(value))
check <- function(value) {
if (value === 1) return false
if (value < -0.6) return true
if (value > -0.6) return true
}
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), check(value))
check <- function(value) {
if (value === 1) return false
if (value < -0.6) return true
if (value > -0.6) return true
}
check <- function (value) {
if (value === 1) return false
if (value < -0.6) return true
if (value > -0.6) return true
}
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), check(value))
check <- function (value) {
if (value === 1) return false
if (value < -0.6) return true
if (value > -0.6) return true
}
check = function (value) {
if (value === 1) return false
if (value < -0.6) return true
if (value > -0.6) return true
}
check <- function (value)
{
if (value === 1) return false
if (value < -0.6) return true
if (value > -0.6) return true
}
check <- function (value)
{
if (value === 1) return false
if (value < -0.6) return true
if (value > -0.6) return true
}
check <- function (value)
{
if (value === 1)
return false
if (value < -0.6)
return true
check <- function (value)
{
if (value == 1)
return false
if (value < -0.6)
return true
if (value > -0.6)
return true
}
check <- function (value)
{
if (value == 1)
return(false)
if (value < -0.6)
return(true)
if (value > -0.6)
return(true)
}
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), check(value))
check <- function (value)
{
print(value)
if (value == 1)
return(false)
if (value < -0.6)
return(true)
if (value > -0.6)
return(true)
}
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), check(value))
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), check)
check <- function (value)
{
print(value)
return(false)
}
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), check)
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), check)
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), value > 0.5)
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), value > 0.6)
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), value > 0.6)
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), value < -0.6)
CM <- cor(data[-1])
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), value > 0.65)
subset(na.omit(data.frame(expand.grid(dimnames(CM)), value = c(CM))), value < -0.65)
view(data)
View(data)
data
data[-1]
withOutCity <- data[, -1]
data[, -1]
cor(data[,-1])
withOutCity <- data[, -1]
plot(withOutCity)
cor(withOutCity)
withOutCityScaled <- scale(withOutCity)
withOutCityScaled
out.pca
out.pca<-PRM
PRM
PCA
pca
out.pca<-PRM(withOutCityScaled)
out.pca<-PVM(withOutCityScaled)
prcomp(withOutCityScaled)
out.pca<- prcomp(withOutCityScaled)
summary(out.pca)
plot(out.pca$x[,1:2])
withOutCity
#Required packages
library(e1071)
library(discretization)
library(infotheo)
install.packages("e1071")
install.packages("discretization")
install.packages("infotheo")
#Required packages
library(e1071)
library(discretization)
library(infotheo)
# Open file that contains the Bupa dataset
bupa<-read.table(file.choose(),header = FALSE,sep=",")
#Generate training and testing set
sub <- sample(nrow(bupa), floor(nrow(bupa) * 0.7))
sub
trainbupa<-bupa[sub, ] #70 % for training
testbupa<-bupa[-sub, ] #30 % for testing
#Naive Bayes classification without data discretization
a=naiveBayes(V7~.,data=trainbupa)
a
pred=predict(a,testbupa[,-7],type="raw")
pred1=max.col(pred)
table(testbupa[,7],pred1)
#Naive Bayes classification with data discretization (entropy)
dbupa=mdlp(bupa)$Disc.data
trainbupa<-dbupa[sub, ]
testbupa<-dbupa[-sub, ]
b=naiveBayes(V7~.,data=trainbupa)
pred=predict(b,testbupa[,-7],type="raw")
pred1=max.col(pred)
table(testbupa[,7],pred1)
#Naive Bayes classification with data discretization (equal width)
dbupa=discretize(bupa, disc="equalwidth")
trainbupa<-dbupa[sub, ]
testbupa<-dbupa[-sub, ]
c=naiveBayes(V7~.,data=trainbupa)
pred=predict(c,testbupa[,-7],type="raw")
pred1=max.col(pred)
table(testbupa[,7],pred1)
#Naive Bayes classification with data discretization (equal frequency)
dbupa=discretize( bupa, disc="equalfreq")
trainbupa<-dbupa[sub, ]
testbupa<-dbupa[-sub, ]
d=naiveBayes(V7~.,data=trainbupa)
pred=predict(d,testbupa[,-7],type="raw")
pred1=max.col(pred)
table(testbupa[,7],pred1)
#Naive Bayes classification with data discretization (ChiMerge)
dbupa=chiM(bupa)$Disc.data
trainbupa<-dbupa[sub, ]
testbupa<-dbupa[-sub, ]
e=naiveBayes(V7~.,data=trainbupa)
pred=predict(e,testbupa[,-7],type="raw")
pred1=max.col(pred)
table(testbupa[,7],pred1)
#Train Adult
Adult<-read.csv(file.choose(),header = FALSE,sep=";")
pred
#Required packages
library(e1071)
library(discretization)
library(infotheo)
data<-read.csv(file.choose(),header = FALSE,sep=";")
data
plot(data)
summary(data)
algo <- naiveBayes(V5~.,data=data)
algo
data <- read.csv(file.choose(),header = TRUE,sep=";")
data <- read.csv('./data.csv',header = TRUE,sep=";")
data <- read.csv('data.csv',header = TRUE,sep=";")
data <- read.csv("data.csv")
getwd()
setwd("/Users/nicolaslopezj/Code/r/clase\ 29\ ago/")
data <- read.csv("data.csv")
setwd("/Users/nicolaslopezj/Code/r/clase\ 29\ ago")
data <- read.csv("data.csv")
getwd()
setwd("/Users/nicolaslopezj/Code/r/clase\ 29\ ago/entrega")
data <- read.csv("data.csv")
test <- read.csv("test.csv")
test <- read.csv("test.csv")
test <- read.csv("test.csv")
test <- read.csv("test.csv")
test <- read.csv("test.csv")
test
data <- read.csv("data.csv", header = TRUE, sep=";")
test <- read.csv("test.csv", header = TRUE, sep=";")
data
test
algo <- naiveBayes(Evade~.,data=data)
algo
predict(algo, test, type="raw")
results <- predict(algo, test, type="raw")
results2 <- max.col(results)
results2
table(test, results2)
results <- predict(algo, test, type="raw")
results2 <- max.col(results)
table(test, results2)
results <- predict(algo, test, type="raw")
results
summary(data)
data[, -1]
data
data[, -1]
test <- read.csv("test.csv", header = TRUE, sep=";")
algo <- naiveBayes(Evade~.,data=data)
results <- predict(algo, test, type="raw")
results2 <- max.col(results)
table(test, results2)
inputData <- read.csv("data.csv", header = TRUE, sep=";")
data <- inputData[, -1]
test <- read.csv("test.csv", header = TRUE, sep=";")
algo <- naiveBayes(Evade~.,data=data)
results <- predict(algo, test, type="raw")
results2 <- max.col(results)
table(test, results2)
results2
results
data
data[,3]
data[,3] <- as.numeric(as.character(data[,3]))
data[,3] <- as.numeric(as.character(data[,3]))
data
data <- read.csv("data.csv", header = TRUE, sep=";")
data <- data[, -1] # Remove id row
data[,3] <- as.numeric(as.character(data[,3]))
data <- lapply(data, gsub, pattern = "K", replacement = "000", fixed = TRUE)
data <- read.csv("data.csv", header = TRUE, sep=";")
data <- data[, -1] # Remove id row
data <- lapply(data, gsub, pattern = "K", replacement = "000", fixed = TRUE)
data
chartr
chartr("K", "000", data[,3])
data <- read.csv("data.csv", header = TRUE, sep=";")
data <- data[, -1] # Remove id row
chartr("K", "000", data$Taxable.Income)
data
data <- read.csv("data.csv", header = TRUE, sep=";")
data <- data[, -1] # Remove id row
data$Taxable.Income <- gsub('K', '000', data$Taxable.Income)
data
data$Taxable.Income <- as.numeric(as.character(data$Taxable.Income)) # convert to number
data
summary(data)
test <- read.csv("test.csv", header = TRUE, sep=";")
algo <- naiveBayes(Evade~.,data=data)
results <- predict(algo, test, type="raw")
results2 <- max.col(results)
table(test, results2)
data <- read.csv("data.csv", header = TRUE, sep=";")
data <- data[, -1] # Remove id row
data$Taxable.Income <- gsub('K', '000', data$Taxable.Income) # Convert k to
data$Taxable.Income <- as.numeric(as.character(data$Taxable.Income)) # convert to number
test <- read.csv("test.csv", header = TRUE, sep=";")
test$Taxable.Income <- gsub('K', '000', test$Taxable.Income) # Convert k to
test$Taxable.Income <- as.numeric(as.character(test$Taxable.Income)) # convert to number
algo <- naiveBayes(Evade~.,data=data)
results <- predict(algo, test, type="raw")
predict(algo, test, type="raw")
data
data[, -4]
realExamples <- predict(algo, data[, -4], type="raw")
realExamples
data
data <- read.csv("data.csv", header = TRUE, sep=";")
data <- data[, -1] # Remove id row
data$Taxable.Income <- gsub('K', '000', data$Taxable.Income) # Convert k to
data$Taxable.Income <- as.numeric(as.character(data$Taxable.Income)) # convert to number
test <- read.csv("test.csv", header = TRUE, sep=";")
test$Taxable.Income <- gsub('K', '000', test$Taxable.Income) # Convert k to
test$Taxable.Income <- as.numeric(as.character(test$Taxable.Income)) # convert to number
algo <- naiveBayes(Evade~.,data=data)
results <- predict(algo, test, type="raw")
realExamples <- predict(algo, data[, -4], type="raw")
